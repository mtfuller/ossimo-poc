# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from . import doublermodule_pb2 as doublermodule__pb2


class DoublerModuleStub(object):
    """Missing associated documentation comment in .proto file"""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Double = channel.unary_unary(
                '/doublermodule.DoublerModule/Double',
                request_serializer=doublermodule__pb2.DoubleRequest.SerializeToString,
                response_deserializer=doublermodule__pb2.DoubleResponse.FromString,
                )


class DoublerModuleServicer(object):
    """Missing associated documentation comment in .proto file"""

    def Double(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DoublerModuleServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Double': grpc.unary_unary_rpc_method_handler(
                    servicer.Double,
                    request_deserializer=doublermodule__pb2.DoubleRequest.FromString,
                    response_serializer=doublermodule__pb2.DoubleResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'doublermodule.DoublerModule', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class DoublerModule(object):
    """Missing associated documentation comment in .proto file"""

    @staticmethod
    def Double(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/doublermodule.DoublerModule/Double',
            doublermodule__pb2.DoubleRequest.SerializeToString,
            doublermodule__pb2.DoubleResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)
