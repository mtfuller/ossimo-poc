# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from . import triplermodule_pb2 as triplermodule__pb2


class TriplerModuleStub(object):
    """Missing associated documentation comment in .proto file"""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Triple = channel.unary_unary(
                '/triplermodule.TriplerModule/Triple',
                request_serializer=triplermodule__pb2.TripleRequest.SerializeToString,
                response_deserializer=triplermodule__pb2.TripleResponse.FromString,
                )


class TriplerModuleServicer(object):
    """Missing associated documentation comment in .proto file"""

    def Triple(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TriplerModuleServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Triple': grpc.unary_unary_rpc_method_handler(
                    servicer.Triple,
                    request_deserializer=triplermodule__pb2.TripleRequest.FromString,
                    response_serializer=triplermodule__pb2.TripleResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'triplermodule.TriplerModule', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class TriplerModule(object):
    """Missing associated documentation comment in .proto file"""

    @staticmethod
    def Triple(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/triplermodule.TriplerModule/Triple',
            triplermodule__pb2.TripleRequest.SerializeToString,
            triplermodule__pb2.TripleResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)
